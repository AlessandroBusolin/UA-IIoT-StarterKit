/* tslint:disable */
/* eslint-disable */
/**
 * OPC UA REST API
 * This API provides simple REST based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: office@opcfoundation.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { NodeId } from './NodeId';
import {
    NodeIdFromJSON,
    NodeIdFromJSONTyped,
    NodeIdToJSON,
} from './NodeId';
import type { QualifiedName } from './QualifiedName';
import {
    QualifiedNameFromJSON,
    QualifiedNameFromJSONTyped,
    QualifiedNameToJSON,
} from './QualifiedName';

/**
 * 
 * @export
 * @interface SimpleAttributeOperand
 */
export interface SimpleAttributeOperand {
    /**
     * 
     * @type {NodeId}
     * @memberof SimpleAttributeOperand
     */
    TypeDefinitionId?: NodeId;
    /**
     * 
     * @type {Array<QualifiedName>}
     * @memberof SimpleAttributeOperand
     */
    BrowsePath?: Array<QualifiedName>;
    /**
     * 
     * @type {number}
     * @memberof SimpleAttributeOperand
     */
    AttributeId?: number;
    /**
     * 
     * @type {string}
     * @memberof SimpleAttributeOperand
     */
    IndexRange?: string;
}

/**
 * Check if a given object implements the SimpleAttributeOperand interface.
 */
export function instanceOfSimpleAttributeOperand(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SimpleAttributeOperandFromJSON(json: any): SimpleAttributeOperand {
    return SimpleAttributeOperandFromJSONTyped(json, false);
}

export function SimpleAttributeOperandFromJSONTyped(json: any, ignoreDiscriminator: boolean): SimpleAttributeOperand {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'TypeDefinitionId': !exists(json, 'TypeDefinitionId') ? undefined : NodeIdFromJSON(json['TypeDefinitionId']),
        'BrowsePath': !exists(json, 'BrowsePath') ? undefined : ((json['BrowsePath'] as Array<any>).map(QualifiedNameFromJSON)),
        'AttributeId': !exists(json, 'AttributeId') ? undefined : json['AttributeId'],
        'IndexRange': !exists(json, 'IndexRange') ? undefined : json['IndexRange'],
    };
}

export function SimpleAttributeOperandToJSON(value?: SimpleAttributeOperand | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'TypeDefinitionId': NodeIdToJSON(value.TypeDefinitionId),
        'BrowsePath': value.BrowsePath === undefined ? undefined : ((value.BrowsePath as Array<any>).map(QualifiedNameToJSON)),
        'AttributeId': value.AttributeId,
        'IndexRange': value.IndexRange,
    };
}

