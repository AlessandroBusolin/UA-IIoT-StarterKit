/* tslint:disable */
/* eslint-disable */
/**
 * OPC UA REST API
 * This API provides simple REST based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: office@opcfoundation.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { NodeId } from './NodeId';
import {
    NodeIdFromJSON,
    NodeIdFromJSONTyped,
    NodeIdToJSON,
} from './NodeId';
import type { QualifiedName } from './QualifiedName';
import {
    QualifiedNameFromJSON,
    QualifiedNameFromJSONTyped,
    QualifiedNameToJSON,
} from './QualifiedName';

/**
 * 
 * @export
 * @interface ReadValueId
 */
export interface ReadValueId {
    /**
     * 
     * @type {NodeId}
     * @memberof ReadValueId
     */
    NodeId?: NodeId;
    /**
     * 
     * @type {number}
     * @memberof ReadValueId
     */
    AttributeId?: number;
    /**
     * 
     * @type {string}
     * @memberof ReadValueId
     */
    IndexRange?: string;
    /**
     * 
     * @type {QualifiedName}
     * @memberof ReadValueId
     */
    DataEncoding?: QualifiedName;
}

/**
 * Check if a given object implements the ReadValueId interface.
 */
export function instanceOfReadValueId(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ReadValueIdFromJSON(json: any): ReadValueId {
    return ReadValueIdFromJSONTyped(json, false);
}

export function ReadValueIdFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReadValueId {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'NodeId': !exists(json, 'NodeId') ? undefined : NodeIdFromJSON(json['NodeId']),
        'AttributeId': !exists(json, 'AttributeId') ? undefined : json['AttributeId'],
        'IndexRange': !exists(json, 'IndexRange') ? undefined : json['IndexRange'],
        'DataEncoding': !exists(json, 'DataEncoding') ? undefined : QualifiedNameFromJSON(json['DataEncoding']),
    };
}

export function ReadValueIdToJSON(value?: ReadValueId | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'NodeId': NodeIdToJSON(value.NodeId),
        'AttributeId': value.AttributeId,
        'IndexRange': value.IndexRange,
        'DataEncoding': QualifiedNameToJSON(value.DataEncoding),
    };
}

