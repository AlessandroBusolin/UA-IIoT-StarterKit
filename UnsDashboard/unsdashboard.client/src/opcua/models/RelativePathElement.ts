/* tslint:disable */
/* eslint-disable */
/**
 * OPC UA REST API
 * This API provides simple REST based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: office@opcfoundation.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { NodeId } from './NodeId';
import {
    NodeIdFromJSON,
    NodeIdFromJSONTyped,
    NodeIdToJSON,
} from './NodeId';
import type { QualifiedName } from './QualifiedName';
import {
    QualifiedNameFromJSON,
    QualifiedNameFromJSONTyped,
    QualifiedNameToJSON,
} from './QualifiedName';

/**
 * 
 * @export
 * @interface RelativePathElement
 */
export interface RelativePathElement {
    /**
     * 
     * @type {NodeId}
     * @memberof RelativePathElement
     */
    ReferenceTypeId?: NodeId;
    /**
     * 
     * @type {boolean}
     * @memberof RelativePathElement
     */
    IsInverse?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RelativePathElement
     */
    IncludeSubtypes?: boolean;
    /**
     * 
     * @type {QualifiedName}
     * @memberof RelativePathElement
     */
    TargetName?: QualifiedName;
}

/**
 * Check if a given object implements the RelativePathElement interface.
 */
export function instanceOfRelativePathElement(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RelativePathElementFromJSON(json: any): RelativePathElement {
    return RelativePathElementFromJSONTyped(json, false);
}

export function RelativePathElementFromJSONTyped(json: any, ignoreDiscriminator: boolean): RelativePathElement {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'ReferenceTypeId': !exists(json, 'ReferenceTypeId') ? undefined : NodeIdFromJSON(json['ReferenceTypeId']),
        'IsInverse': !exists(json, 'IsInverse') ? undefined : json['IsInverse'],
        'IncludeSubtypes': !exists(json, 'IncludeSubtypes') ? undefined : json['IncludeSubtypes'],
        'TargetName': !exists(json, 'TargetName') ? undefined : QualifiedNameFromJSON(json['TargetName']),
    };
}

export function RelativePathElementToJSON(value?: RelativePathElement | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ReferenceTypeId': NodeIdToJSON(value.ReferenceTypeId),
        'IsInverse': value.IsInverse,
        'IncludeSubtypes': value.IncludeSubtypes,
        'TargetName': QualifiedNameToJSON(value.TargetName),
    };
}

