/* tslint:disable */
/* eslint-disable */
/**
 * OPC UA REST API
 * This API provides simple REST based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: office@opcfoundation.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ExpandedNodeId } from './ExpandedNodeId';
import {
    ExpandedNodeIdFromJSON,
    ExpandedNodeIdFromJSONTyped,
    ExpandedNodeIdToJSON,
} from './ExpandedNodeId';
import type { LocalizedText } from './LocalizedText';
import {
    LocalizedTextFromJSON,
    LocalizedTextFromJSONTyped,
    LocalizedTextToJSON,
} from './LocalizedText';
import type { NodeId } from './NodeId';
import {
    NodeIdFromJSON,
    NodeIdFromJSONTyped,
    NodeIdToJSON,
} from './NodeId';
import type { QualifiedName } from './QualifiedName';
import {
    QualifiedNameFromJSON,
    QualifiedNameFromJSONTyped,
    QualifiedNameToJSON,
} from './QualifiedName';

/**
 * 
 * @export
 * @interface ReferenceDescription
 */
export interface ReferenceDescription {
    /**
     * 
     * @type {NodeId}
     * @memberof ReferenceDescription
     */
    ReferenceTypeId?: NodeId;
    /**
     * 
     * @type {boolean}
     * @memberof ReferenceDescription
     */
    IsForward?: boolean;
    /**
     * 
     * @type {ExpandedNodeId}
     * @memberof ReferenceDescription
     */
    NodeId?: ExpandedNodeId;
    /**
     * 
     * @type {QualifiedName}
     * @memberof ReferenceDescription
     */
    BrowseName?: QualifiedName;
    /**
     * 
     * @type {LocalizedText}
     * @memberof ReferenceDescription
     */
    DisplayName?: LocalizedText;
    /**
     * 
     * @type {number}
     * @memberof ReferenceDescription
     */
    NodeClass?: number;
    /**
     * 
     * @type {ExpandedNodeId}
     * @memberof ReferenceDescription
     */
    TypeDefinition?: ExpandedNodeId;
}

/**
 * Check if a given object implements the ReferenceDescription interface.
 */
export function instanceOfReferenceDescription(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ReferenceDescriptionFromJSON(json: any): ReferenceDescription {
    return ReferenceDescriptionFromJSONTyped(json, false);
}

export function ReferenceDescriptionFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReferenceDescription {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'ReferenceTypeId': !exists(json, 'ReferenceTypeId') ? undefined : NodeIdFromJSON(json['ReferenceTypeId']),
        'IsForward': !exists(json, 'IsForward') ? undefined : json['IsForward'],
        'NodeId': !exists(json, 'NodeId') ? undefined : ExpandedNodeIdFromJSON(json['NodeId']),
        'BrowseName': !exists(json, 'BrowseName') ? undefined : QualifiedNameFromJSON(json['BrowseName']),
        'DisplayName': !exists(json, 'DisplayName') ? undefined : LocalizedTextFromJSON(json['DisplayName']),
        'NodeClass': !exists(json, 'NodeClass') ? undefined : json['NodeClass'],
        'TypeDefinition': !exists(json, 'TypeDefinition') ? undefined : ExpandedNodeIdFromJSON(json['TypeDefinition']),
    };
}

export function ReferenceDescriptionToJSON(value?: ReferenceDescription | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ReferenceTypeId': NodeIdToJSON(value.ReferenceTypeId),
        'IsForward': value.IsForward,
        'NodeId': ExpandedNodeIdToJSON(value.NodeId),
        'BrowseName': QualifiedNameToJSON(value.BrowseName),
        'DisplayName': LocalizedTextToJSON(value.DisplayName),
        'NodeClass': value.NodeClass,
        'TypeDefinition': ExpandedNodeIdToJSON(value.TypeDefinition),
    };
}

